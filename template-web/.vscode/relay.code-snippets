{
  "relayHookContainer": {
    "prefix": "relay fragment component",
    "description": "Creates a relay fragment container in hooks",
    "body": [
      "import React from \"react\";",
      "import _ from \"lodash\";",
      "import { useFragment, graphql } from \"react-relay/hooks\";",
      "",
      "import { ${0:${TM_FILENAME_BASE}}_record\\$key } from \"@picasso/fragments/src/${0:${TM_FILENAME_BASE}}_record.graphql\";",
      "",
      "const fragmentSpec = graphql`",
      "  fragment ${0:${TM_FILENAME_BASE}}_record on User {",
      "    id",
      "  }",
      "`;",
      "",
      "interface I${0:${TM_FILENAME_BASE}}Props {",
      "  record: ${0:${TM_FILENAME_BASE}}_record\\$key;",
      "}",
      "",
      "function ${0:${TM_FILENAME_BASE}}(props: I${0:${TM_FILENAME_BASE}}Props){",
      "  const record = useFragment(fragmentSpec, props.record);",
      "  return (",
      "    <div>",
      "      <p>${0:${TM_FILENAME_BASE}}</p>",
      "      <p> {record.id} </p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${0:${TM_FILENAME_BASE}};"
    ]
  },
  "relayHookTableContainer": {
    "prefix": "relay fragment table component",
    "description": "Creates a relay fragment table container in hooks",
    "body": [
      "import React from \"react\";",
      "import _ from \"lodash\";",
      "import { useFragment, graphql } from \"react-relay/hooks\";",
      "",
      "import { ColumnsType } from 'antd/lib/table';",
      "",
      "import { ${0:${TM_FILENAME_BASE}}_records\\$data, ${0:${TM_FILENAME_BASE}}_records\\$key } from \"@picasso/fragments/src/${0:${TM_FILENAME_BASE}}_records.graphql\";",
      "",
      "import Table from '@picasso/shared/src/Table';",
      "",
      "type RecordType = ${0:${TM_FILENAME_BASE}}_records\\$data[0];",
      "",
      "const fragmentSpec = graphql`",
      "  fragment ${0:${TM_FILENAME_BASE}}_records on User @relay(plural: true) {",
      "    id",
      "  }",
      "`;",
      "",
      "interface I${0:${TM_FILENAME_BASE}}Props {",
      "  records: ${0:${TM_FILENAME_BASE}}_records\\$key;",
      "}",
      "",
      "function ${0:${TM_FILENAME_BASE}}(props: I${0:${TM_FILENAME_BASE}}Props){",
      "  const records = useFragment(fragmentSpec, props.records);",
      "",
      "  const columns: ColumnsType<RecordType> = [",
      "    {",
      "      title: 'ID',",
      "      dataIndex: 'id',",
      "      key: 'id',",
      "    },",
      "  ];",
      "",
      "  return (",
      "    <div>",
      "      <p>${0:${TM_FILENAME_BASE}}</p>",
      "      <Table.Model columns={columns} dataSource={records} />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${0:${TM_FILENAME_BASE}};"
    ]
  },
  "relayHookPage": {
    "prefix": "relay hook page",
    "description": "Creates a Relay hook page with viewer query",
    "body": [
      "import React from \"react\";",
      "import _ from \"lodash\";",
      "import { graphql } from 'react-relay/hooks';",
      "import JSONViewer from '@picasso/shared/src/Components/JSONViewer';",
      "import { useNetworkLazyLoadQuery } from '@picasso/shared/src/relay/hooks';",
      "",
      "import { ${0:${TM_FILENAME_BASE}}Query } from \"@picasso/fragments/src/${0:${TM_FILENAME_BASE}}Query.graphql\";",
      "",
      "const ${0:${TM_FILENAME_BASE}}PageQuery = graphql`",
      "  query ${0:${TM_FILENAME_BASE}}Query {",
      "    currentUser {",
      "     id",
      "    }",
      "  }",
      "`",
      "",
      "function ${0:${TM_FILENAME_BASE}}(props){",
      "  const data = useNetworkLazyLoadQuery<${0:${TM_FILENAME_BASE}}Query>(",
      "    ${0:${TM_FILENAME_BASE}}PageQuery,",
      "    {}",
      "  );",
      "",
      "  console.log(data);",
      "",
      "  return (",
      "    <div>",
      "      <p>${0:${TM_FILENAME_BASE}}</p>",
      "      <JSONViewer data={data} />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${0:${TM_FILENAME_BASE}};",
      ""
    ]
  },
  "reactHookNodePage": {
    "prefix": "relay page with Node Query",
    "description": "Creates a Relay Hooks page with Node Query",
    "body": [
      "import React from \"react\";",
      "import _ from \"lodash\";",
      "import { graphql } from 'react-relay/hooks';",
      "import { useNetworkLazyLoadQuery } from '@picasso/shared/src/relay/hooks';",
      "import { useParams } from 'react-router-dom';",
      "import JSONViewer from '@picasso/shared/src/Components/JSONViewer';",
      "import ErrorPage from '@picasso/shared/src/Components/ErrorPage';",
      "",
      "import { ${0:${TM_FILENAME_BASE}}Query } from \"@picasso/fragments/src/${0:${TM_FILENAME_BASE}}Query.graphql\";",
      "",
      "interface I${1:${TM_FILENAME_BASE}}Props {",
      "  changeThisId?: string",
      "}",
      "",
      "function ${0:${TM_FILENAME_BASE}}(props: I${1:${TM_FILENAME_BASE}}Props){",
      "  const params = useParams();",
      "  const changeThisId = props.changeThisId || params.changeThisId;",
      "",
      "  const data = useNetworkLazyLoadQuery<${0:${TM_FILENAME_BASE}}Query>(",
      "    graphql`",
      "      query ${0:${TM_FILENAME_BASE}}Query(\\$id: ID!) {",
      "        node(id: \\$id) {",
      "          id",
      "           __typename",
      "           ... on User {",
      "             id ",
      "           }",
      "        }",
      "      }",
      "    `,",
      "    { id: changeThisId as string }",
      "  );",
      "",
      "  console.log(data);",
      "",
      "  const { node } = data",
      "if (!node) {",
      "  return <ErrorPage errors={['Something went wrong']} />",
      "}",
      "",
      "  return (",
      "    <div>",
      "      <p>${0:${TM_FILENAME_BASE}}</p>",
      "      <JSONViewer data={data} />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${0:${TM_FILENAME_BASE}};",
      ""
    ]
  },
  "relayFragmentQuery": {
    "prefix": "relay fragment query",
    "description": "Add fragment query",
    "body": [
      "import { useFragment, graphql } from \"react-relay/hooks\";",
      "",
      "import { ${0:${TM_FILENAME_BASE}}_viewer\\$key } from \"@picasso/fragments/src/${0:${TM_FILENAME_BASE}}_viewer.graphql\";",
      "",
      "const fragmentSpec = graphql`",
      "  fragment ${0:${TM_FILENAME_BASE}}_viewer on Viewer {",
      "    id",
      "  }",
      "`;",
      "",
      "",
      "  const viewer = useFragment(fragmentSpec, props.viewer);"
    ]
  },
  "relayHookPaginationFragment": {
    "prefix": "relay hook pagination fragment",
    "description": "Creates a Relay fragment with ES7 module system with pagination fragment",
    "body": [
      "import React from \"react\";",
      "import _ from \"lodash\";",
      "import { graphql, usePaginationFragment } from \"react-relay/hooks\";",
      "",
      "import { ${1:${TM_FILENAME_BASE}}_${2}\\$key } from \"@picasso/fragments/src/${1:${TM_FILENAME_BASE}}_${2}.graphql\";",
      "import { List, Button } from \"antd\";",
      "",
      "const paginationFragmentSpec = graphql`",
      "  fragment ${1:${TM_FILENAME_BASE}}_${2} on ${1:${TM_FILENAME_BASE}}",
      "  @argumentDefinitions(first: { type: \"Int\" }, after: { type: \"String\" })",
      "  @refetchable(queryName: \"${1:${TM_FILENAME_BASE}}Query\") {",
      "    id",
      "    ${2}Items(first: \\$first, after: \\$after)",
      "      @connection(key: \"${1:${TM_FILENAME_BASE}}_${2}Items\") {",
      "      edges {",
      "        node {",
      "          id",
      "        }",
      "      }",
      "      pageInfo {",
      "        hasNextPage",
      "        endCursor",
      "      }",
      "    }",
      "  }",
      "`;",
      "",
      "interface I${1:${TM_FILENAME_BASE}}Props {",
      "  ${2}: ${1:${TM_FILENAME_BASE}}_${2}\\$key;",
      "}",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props: I${1:${TM_FILENAME_BASE}}Props){",
      "  const {",
      "    data,",
      "    loadNext,",
      "  } = usePaginationFragment(paginationFragmentSpec, props.${2});",
      "",
      "  const ${2}Items = _.map(data.${2}Items?.edges, edge => edge?.node)",
      "",
      "  const pageInfo = data.${2}Items?.pageInfo;",
      "",
      "  return (",
      "    <div className=\"px-3\">",
      "      <List",
      "        dataSource={${2}Items}",
      "        renderItem={(${2}Item) => {",
      "          return (",
      "            <div>",
      "              {${1:${TM_FILENAME_BASE}}Item?.id}",
      "            </div>",
      "          );",
      "        }}",
      "      />",
      "      <div className=\"mx-2 my-3\">",
      "        {_.get(pageInfo, \"hasNextPage\") ? (",
      "          <Button onClick={() => loadNext(10)}>Load Next</Button>",
      "        ) : null}",
      "      </div>",
      "    </div>",
      "",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ]
  },
  "relayMutation": {
    "prefix": "relay mutation",
    "description": "Relay mutation",
    "body": [
      "const [commit, commitIsInFlight] = useCompatMutation<",
      "  ${0:${TM_FILENAME_BASE}}Mutation",
      ">(graphql`",
      "  mutation ${0:${TM_FILENAME_BASE}}Mutation(",
      "    \\$input: ${1}Input!",
      "  ) {",
      "    ${1}(input: \\$input) {",
      "      ${1} {",
      "        id",
      "      }",
      "      errors",
      "    }",
      "  }",
      "`);"
    ]
  }
}
type ApiAccessToken implements CommentInterface & ModelInterface & Node {
  active: Boolean!
  commentCount: Int!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  name: String!
  token: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

input ApiAccessTokenCreateUpdateInput {
  active: Boolean!

  """Autogenerated input type of ApiAccessTokenCreateUpdate"""
  clientMutationId: String
  description: String
  expiresAt: ISO8601DateTime
  name: String!
  objectId: ID
}

type ApiAccessTokenCreateUpdatePayload {
  """Autogenerated return type of ApiAccessTokenCreateUpdate."""
  apiAccessToken: ApiAccessToken

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

type Attachment implements ModelInterface & Node {
  contentType: String
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  name: String!
  recordId: Int!
  recordType: String!
  updatedAt: ISO8601DateTime!
  url: String
}

type AuthPayload {
  token: String!
  user: User!
}

type BlogPost implements ModelAttachmentInterface & ModelInterface & Node {
  attachments: [ModelAttachment!]!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  publishedAt: ISO8601DateTime
  richTextContent: RichTextJson!
  shortId: String!
  status: BlogPostStatusEnum!
  tags: [String!]!
  title: String!
  updatedAt: ISO8601DateTime!
}

enum BlogPostStatusEnum {
  DRAFT
  PUBLISHED
}

enum BlogPostsStatusEnum {
  all
  draft
  published
}

type Comment implements ModelInterface & Node {
  createdAt: ISO8601DateTime!
  discardedAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  rating: Float
  richTextContent: RichTextJson!
  tags: [String!]!
  updatedAt: ISO8601DateTime!
  user: User!
}

input CommentCreateUpdateInput {
  """Signed blob ID generated via `createDirectUpload` mutation"""
  attachmentSignedId: String

  """Autogenerated input type of CommentCreateUpdate"""
  clientMutationId: String
  commentableId: ID
  objectId: ID
  rating: Float
  richTextContent: StoreJsonInput!
  tags: [String!]
}

type CommentCreateUpdatePayload {
  """Autogenerated return type of CommentCreateUpdate."""
  clientMutationId: String
  comment: Comment
  errors: [String!]!
  user: User
}

"""An object with an ID."""
interface CommentInterface {
  commentCount: Int!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

input CreateDirectUploadInput {
  byteSize: Int!
  checksum: String!

  """Autogenerated input type of CreateDirectUpload"""
  clientMutationId: String
  contentType: String!
  filename: String!
}

type CreateDirectUploadPayload {
  """Autogenerated return type of CreateDirectUpload."""
  clientMutationId: String
  directUpload: DirectUpload
  errors: [String!]!
}

input DestroyObjectInput {
  """Autogenerated input type of DestroyObject"""
  clientMutationId: String
  objectId: ID!
}

type DestroyObjectPayload {
  """Autogenerated return type of DestroyObject."""
  clientMutationId: String
  errors: [String!]!
}

type DirectUpload {
  directUploadHeaders: JSON!
  directUploadUrl: String!
  filename: String!
  id: String!
  publicUrl: String!
  signedId: String!
}

input DiscardObjectInput {
  """Autogenerated input type of DiscardObject"""
  clientMutationId: String
  objectId: ID!
}

type DiscardObjectPayload {
  """Autogenerated return type of DiscardObject."""
  clientMutationId: String
  errors: [String!]!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type JobRecord implements ModelInterface & Node {
  activeJobId: String
  concurrencyKey: String
  createdAt: ISO8601DateTime!
  cronAt: ISO8601DateTime
  cronKey: String
  error: String
  finishedAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  performedAt: ISO8601DateTime
  priority: Int
  queueName: String
  retriedGoodJobId: String
  scheduledAt: ISO8601DateTime
  serializedParams: JSON
  updatedAt: ISO8601DateTime!
}

"""Represents untyped JSON"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type ModelAttachment implements ModelInterface & Node {
  attachment: Attachment
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}

input ModelAttachmentCreateUpdateInput {
  """Signed blob ID generated via `createDirectUpload` mutation"""
  attachmentSignedId: String

  """Autogenerated input type of ModelAttachmentCreateUpdate"""
  clientMutationId: String
  name: String!
  objectId: ID
  ownerId: ID!
}

type ModelAttachmentCreateUpdatePayload {
  """Autogenerated return type of ModelAttachmentCreateUpdate."""
  clientMutationId: String
  errors: [String!]!
  modelAttachment: ModelAttachment
  user: User
}

"""An object with an ID."""
interface ModelAttachmentInterface implements ModelInterface & Node {
  attachments: [ModelAttachment!]!
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

"""An object with an ID."""
interface ModelInterface implements Node {
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  apiAccessTokenCreateUpdate(
    """Parameters for ApiAccessTokenCreateUpdate"""
    input: ApiAccessTokenCreateUpdateInput!
  ): ApiAccessTokenCreateUpdatePayload
  commentCreateUpdate(
    """Parameters for CommentCreateUpdate"""
    input: CommentCreateUpdateInput!
  ): CommentCreateUpdatePayload
  createDirectUpload(
    """Parameters for CreateDirectUpload"""
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload
  destroyObject(
    """Parameters for DestroyObject"""
    input: DestroyObjectInput!
  ): DestroyObjectPayload
  discardObject(
    """Parameters for DiscardObject"""
    input: DiscardObjectInput!
  ): DiscardObjectPayload
  login(input: LoginInput!): AuthPayload
  modelAttachmentCreateUpdate(
    """Parameters for ModelAttachmentCreateUpdate"""
    input: ModelAttachmentCreateUpdateInput!
  ): ModelAttachmentCreateUpdatePayload
  register(input: RegisterInput!): AuthPayload
  superUserUpdate(
    """Parameters for SuperUserUpdate"""
    input: SuperUserUpdateInput!
  ): SuperUserUpdatePayload
  userOtpUpdate(
    """Parameters for UserOtpUpdate"""
    input: UserOtpUpdateInput!
  ): UserOtpUpdatePayload
  userUpdate(
    """Parameters for UserUpdate"""
    input: UserUpdateInput!
  ): UserUpdatePayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Query {
  blogPost(shortId: String!): BlogPost
  blogPosts(status: BlogPostsStatusEnum!): [BlogPost!]
  currentUser: User
  customNode(id: ID!, name: String!): Node
  env: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]
  ): [Node]
  spoof: Boolean!
  superUser: SuperUser!
  users: [User]
}

input RegisterInput {
  email: String!
  name: String!
  nickname: String
  password: String!
}

type RichTextJson {
  content: String
  contentHtml: String
  contentMarkdown: String
  format: RichTextJsonFormatEnum!
}

enum RichTextJsonFormatEnum {
  lexical
  markdown
  plain
}

"""Untyped JSON Input used for Store Model"""
scalar StoreJsonInput

type SuperUser implements ModelInterface & Node {
  createdAt: ISO8601DateTime!
  id: ID!
  jobRecords: [JobRecord!]!
  modelId: Int!
  name: String
  updatedAt: ISO8601DateTime!
  users(term: String): [User!]!
}

input SuperUserUpdateInput {
  """Autogenerated input type of SuperUserUpdate"""
  clientMutationId: String
  objectId: ID
  spoofId: ID
}

type SuperUserUpdatePayload {
  """Autogenerated return type of SuperUserUpdate."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

type User implements ModelInterface & Node {
  apiAccessTokens: [ApiAccessToken]
  avatar: Attachment
  cannyToken: String
  confirmed: Boolean!
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  firstName: String!
  id: ID!
  modelId: Int!
  name: String
  nickname: String
  otpEnabled: Boolean!
  otpProvisioningUri: String!
  spoof: Boolean!
  updatedAt: ISO8601DateTime!
}

input UserOtpUpdateInput {
  """Autogenerated input type of UserOtpUpdate"""
  clientMutationId: String
  objectId: ID!
  otpCode1: String!
  otpCode2: String!
  otpKey: String!
}

type UserOtpUpdatePayload {
  """Autogenerated return type of UserOtpUpdate."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

input UserUpdateInput {
  """Signed blob ID generated via `createDirectUpload` mutation"""
  avatarSignedId: String

  """Autogenerated input type of UserUpdate"""
  clientMutationId: String
  name: String
  nickname: String
  objectId: ID!
  sendConfirmationInstructions: Boolean
}

type UserUpdatePayload {
  """Autogenerated return type of UserUpdate."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

type Version implements ModelInterface & Node {
  changes: [VersionChange!]!
  createdAt: ISO8601DateTime!
  event: String!
  id: ID!
  itemId: Int!
  itemType: String!
  metadata: JSON
  modelId: Int!
  updatedAt: ISO8601DateTime!
  user: User
  whodunnit: String
}

type VersionChange {
  label: String!
  newValue: String
  previousValue: String
}
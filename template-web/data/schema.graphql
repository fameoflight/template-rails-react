type ApiAccessToken implements CommentInterface & ModelInterface & Node {
  active: Boolean!
  commentCount: Int!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  name: String!
  token: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""Autogenerated input type of ApiAccessTokenCreateUpdate"""
input ApiAccessTokenCreateUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
  description: String = null
  active: Boolean!
  expiresAt: ISO8601DateTime = null
  objectId: ID
}

"""Autogenerated return type of ApiAccessTokenCreateUpdate."""
type ApiAccessTokenCreateUpdatePayload {
  apiAccessToken: ApiAccessToken

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentUser: User
  errors: [String!]!
}

type Attachment implements ModelInterface & Node {
  contentType: String
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  name: String!
  recordId: Int!
  recordType: String!
  updatedAt: ISO8601DateTime!
  url: String
}

type BlogPost implements ModelAttachmentInterface & ModelInterface & Node {
  attachments: [ModelAttachment!]!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  publishedAt: ISO8601DateTime
  richTextContent: RichTextJson!
  shortId: String!
  status: BlogPostStatusEnum!
  tags: [String!]!
  title: String!
  updatedAt: ISO8601DateTime!
}

enum BlogPostStatusEnum {
  draft
  published
}

type City {
  admin1Name: String
  country: String!
  lat: Float!
  lng: Float!
  name: String!
}

type Comment implements ModelInterface & Node {
  createdAt: ISO8601DateTime!
  discardedAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  rating: Float
  richTextContent: RichTextJson!
  tags: [String!]
  updatedAt: ISO8601DateTime!
  user: User!
}

"""Autogenerated input type of CommentCreateUpdate"""
input CommentCreateUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  tags: [String!] = null
  rating: Float = null
  objectId: ID
  richTextContent: StoreJsonInput!
  commentableId: ID

  """Signed blob ID generated via `createDirectUpload` mutation"""
  attachmentSignedId: String
}

"""Autogenerated return type of CommentCreateUpdate."""
type CommentCreateUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  comment: Comment
  currentUser: User
  errors: [String!]!
}

"""An object with an ID."""
interface CommentInterface {
  commentCount: Int!
  comments: [Comment!]!
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of CreateDirectUpload"""
input CreateDirectUploadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  byteSize: Int!
  checksum: String!
  contentType: String!
  filename: String!
}

"""Autogenerated return type of CreateDirectUpload."""
type CreateDirectUploadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  directUpload: DirectUpload!
  errors: [String!]!
}

"""Autogenerated input type of DestroyObject"""
input DestroyObjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  objectId: ID!
}

"""Autogenerated return type of DestroyObject."""
type DestroyObjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

type DirectUpload {
  directUploadHeaders: JSON!
  directUploadUrl: String!
  filename: String!
  id: String!
  publicUrl: String!
  signedId: String!
}

"""Autogenerated input type of DiscardObject"""
input DiscardObjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  objectId: ID!
}

"""Autogenerated return type of DiscardObject."""
type DiscardObjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

type JobRecord implements ModelInterface & Node {
  activeJobId: String
  concurrencyKey: String
  createdAt: ISO8601DateTime!
  cronAt: ISO8601DateTime
  cronKey: String
  error: String
  finishedAt: ISO8601DateTime
  id: ID!
  modelId: Int!
  performedAt: ISO8601DateTime
  priority: Int
  queueName: String
  retriedGoodJobId: String
  scheduledAt: ISO8601DateTime
  serializedParams: JSON
  updatedAt: ISO8601DateTime!
}

type Message {
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  roomId: ID!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""Autogenerated return type of MessageCreate."""
type MessageCreatePayload {
  errors: [String!]!
  message: Message
}

type ModelAttachment implements ModelInterface & Node {
  attachment: Attachment
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of ModelAttachmentCreateUpdate"""
input ModelAttachmentCreateUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
  objectId: ID
  ownerId: ID!

  """Signed blob ID generated via `createDirectUpload` mutation"""
  attachmentSignedId: String
}

"""Autogenerated return type of ModelAttachmentCreateUpdate."""
type ModelAttachmentCreateUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentUser: User
  errors: [String!]!
  modelAttachment: ModelAttachment
}

"""An object with an ID."""
interface ModelAttachmentInterface implements ModelInterface & Node {
  attachments: [ModelAttachment!]!
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

"""An object with an ID."""
interface ModelInterface implements Node {
  createdAt: ISO8601DateTime!

  """ID of the object."""
  id: ID!
  modelId: Int!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  apiAccessTokenCreateUpdate(
    """Parameters for ApiAccessTokenCreateUpdate"""
    input: ApiAccessTokenCreateUpdateInput!
  ): ApiAccessTokenCreateUpdatePayload
  commentCreateUpdate(
    """Parameters for CommentCreateUpdate"""
    input: CommentCreateUpdateInput!
  ): CommentCreateUpdatePayload
  createDirectUpload(
    """Parameters for CreateDirectUpload"""
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload
  destroyObject(
    """Parameters for DestroyObject"""
    input: DestroyObjectInput!
  ): DestroyObjectPayload
  discardObject(
    """Parameters for DiscardObject"""
    input: DiscardObjectInput!
  ): DiscardObjectPayload
  messageCreate(content: String!, roomId: String!): MessageCreatePayload
  modelAttachmentCreateUpdate(
    """Parameters for ModelAttachmentCreateUpdate"""
    input: ModelAttachmentCreateUpdateInput!
  ): ModelAttachmentCreateUpdatePayload

  """Mark all notifications as read for the current user"""
  notificationMarkAllAsRead(
    """Parameters for NotificationMarkAllAsRead"""
    input: NotificationMarkAllAsReadInput!
  ): NotificationMarkAllAsReadPayload

  """Mark a notification as read"""
  notificationMarkAsRead(
    """Parameters for NotificationMarkAsRead"""
    input: NotificationMarkAsReadInput!
  ): NotificationMarkAsReadPayload
  superUserUpdate(
    """Parameters for SuperUserUpdate"""
    input: SuperUserUpdateInput!
  ): SuperUserUpdatePayload
  userOtpUpdate(
    """Parameters for UserOtpUpdate"""
    input: UserOtpUpdateInput!
  ): UserOtpUpdatePayload
  userUpdate(
    """Parameters for UserUpdate"""
    input: UserUpdateInput!
  ): UserUpdatePayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Notification implements ModelInterface & Node {
  color: String!
  createdAt: ISO8601DateTime!
  data: JSON
  icon: String!
  id: ID!
  message: String!
  modelId: Int!
  notificationType: String!
  read: Boolean!
  readAt: ISO8601DateTime
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

"""Autogenerated input type of NotificationMarkAllAsRead"""
input NotificationMarkAllAsReadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of NotificationMarkAllAsRead."""
type NotificationMarkAllAsReadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
  unreadCount: Int!
}

"""Autogenerated input type of NotificationMarkAsRead"""
input NotificationMarkAsReadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  notificationId: ID!
}

"""Autogenerated return type of NotificationMarkAsRead."""
type NotificationMarkAsReadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  notification: Notification
  unreadCount: Int!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  blogPost(shortId: String!): BlogPost
  blogPosts(status: blogPostsStatusEnum!): [BlogPost!]!
  cities(countryCode: String!): [City!]!
  currentUser: User
  customNode(name: String!, id: ID!): Node
  env: String!
  messages(roomId: String!, limit: Int = 50): [Message!]!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    limit: Int = 20
  ): NotificationConnection!
  spoof: Boolean!
  superUser: SuperUser!
  unreadNotificationCount: Int!
}

type RichTextJson {
  content: String
  contentHtml: String
  contentMarkdown: String
  format: RichTextJsonFormatEnum!
}

enum RichTextJsonFormatEnum {
  plain
  markdown
  lexical
}

"""Untyped JSON Input used for Store Model"""
scalar StoreJsonInput

type Subscription {
  """A message was added to a chat room"""
  messageAdded(roomId: String!): Message

  """User received a new notification or notification count changed"""
  notificationsUpdated: Notification
}

type SuperUser implements ModelInterface & Node {
  createdAt: ISO8601DateTime!
  id: ID!
  jobRecords: [JobRecord!]!
  modelId: Int!
  name: String
  updatedAt: ISO8601DateTime!
  users(term: String = null): [User!]!
  versions(itemId: ID!, itemType: String!): [Version!]!
}

"""Autogenerated input type of SuperUserUpdate"""
input SuperUserUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  objectId: ID
  spoofId: ID
}

"""Autogenerated return type of SuperUserUpdate."""
type SuperUserUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentUser: User
  errors: [String!]!
  user: User
}

type User implements ModelInterface & Node {
  apiAccessTokens: [ApiAccessToken!]!
  avatar: Attachment
  cannyToken: String
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  id: ID!
  modelId: Int!
  name: String
  nickname: String
  otpEnabled: Boolean!
  otpProvisioningUri: String!
  spoof: Boolean!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of UserOtpUpdate"""
input UserOtpUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  objectId: ID!
  otpCode1: String!
  otpCode2: String!
  otpKey: String!
}

"""Autogenerated return type of UserOtpUpdate."""
type UserOtpUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentUser: User
  errors: [String!]!
  user: User
}

"""Autogenerated input type of UserUpdate"""
input UserUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String = null
  nickname: String = null
  objectId: ID!

  """Signed blob ID generated via `createDirectUpload` mutation"""
  avatarSignedId: String
  sendConfirmationInstructions: Boolean
}

"""Autogenerated return type of UserUpdate."""
type UserUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentUser: User
  errors: [String!]!
  user: User
}

type Version implements ModelInterface & Node {
  changes: [VersionChange!]!
  createdAt: ISO8601DateTime!
  event: String!
  id: ID!
  itemId: Int!
  itemType: String!
  metadata: JSON
  modelId: Int!
  updatedAt: ISO8601DateTime!
  user: User
  whodunnit: String
}

type VersionChange {
  label: String!
  newValue: String
  previousValue: String
}

enum blogPostsStatusEnum {
  all
  draft
  published
}
schema {
  mutation: Mutation
  query: Query
}

type Query {
  currentUser: User

  users: [User]

  env: String!

  blogPost(shortId: String!): BlogPost

  blogPosts(status: BlogPostsStatusEnum!): [BlogPost!]

  customNode(name: String!, id: ID!): Node

  "Fetches an object given its ID."
  node(
    "ID of the object."
    id: ID!
  ): Node

  "Fetches a list of objects given a list of IDs."
  nodes(
    "IDs of the objects."
    ids: [ID!]
  ): [Node]

  spoof: Boolean!

  superUser: SuperUser!
}

type Mutation {
  register(input: RegisterInput!): AuthPayload
  login(input: LoginInput!): AuthPayload
  apiAccessTokenCreateUpdate(
    "Parameters for ApiAccessTokenCreateUpdate"
    input: ApiAccessTokenCreateUpdateInput!
  ): ApiAccessTokenCreateUpdatePayload
  commentCreateUpdate(
    "Parameters for CommentCreateUpdate"
    input: CommentCreateUpdateInput!
  ): CommentCreateUpdatePayload
  createDirectUpload(
    "Parameters for CreateDirectUpload"
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload
  destroyObject(
    "Parameters for DestroyObject"
    input: DestroyObjectInput!
  ): DestroyObjectPayload
  discardObject(
    "Parameters for DiscardObject"
    input: DiscardObjectInput!
  ): DiscardObjectPayload
  modelAttachmentCreateUpdate(
    "Parameters for ModelAttachmentCreateUpdate"
    input: ModelAttachmentCreateUpdateInput!
  ): ModelAttachmentCreateUpdatePayload
  superUserUpdate(
    "Parameters for SuperUserUpdate"
    input: SuperUserUpdateInput!
  ): SuperUserUpdatePayload
  userOtpUpdate(
    "Parameters for UserOtpUpdate"
    input: UserOtpUpdateInput!
  ): UserOtpUpdatePayload
  userUpdate(
    "Parameters for UserUpdate"
    input: UserUpdateInput!
  ): UserUpdatePayload
}

input ApiAccessTokenCreateUpdateInput {
  "Autogenerated input type of ApiAccessTokenCreateUpdate"
  clientMutationId: String

  name: String!

  description: String

  active: Boolean!

  expiresAt: ISO8601DateTime

  objectId: ID
}

input CommentCreateUpdateInput {
  "Autogenerated input type of CommentCreateUpdate"
  clientMutationId: String

  tags: [String!]

  rating: Float

  objectId: ID

  richTextContent: StoreJsonInput!

  commentableId: ID

  "Signed blob ID generated via `createDirectUpload` mutation"
  attachmentSignedId: String
}

input CreateDirectUploadInput {
  "Autogenerated input type of CreateDirectUpload"
  clientMutationId: String

  byteSize: Int!

  checksum: String!

  contentType: String!

  filename: String!
}

input DestroyObjectInput {
  "Autogenerated input type of DestroyObject"
  clientMutationId: String

  objectId: ID!
}

input DiscardObjectInput {
  "Autogenerated input type of DiscardObject"
  clientMutationId: String

  objectId: ID!
}

input ModelAttachmentCreateUpdateInput {
  "Autogenerated input type of ModelAttachmentCreateUpdate"
  clientMutationId: String

  name: String!

  objectId: ID

  ownerId: ID!

  "Signed blob ID generated via `createDirectUpload` mutation"
  attachmentSignedId: String
}

input SuperUserUpdateInput {
  "Autogenerated input type of SuperUserUpdate"
  clientMutationId: String

  objectId: ID

  spoofId: ID
}

input UserOtpUpdateInput {
  "Autogenerated input type of UserOtpUpdate"
  clientMutationId: String

  objectId: ID!

  otpCode1: String!

  otpCode2: String!

  otpKey: String!
}

input UserUpdateInput {
  "Autogenerated input type of UserUpdate"
  clientMutationId: String

  name: String

  nickname: String

  objectId: ID!

  "Signed blob ID generated via `createDirectUpload` mutation"
  avatarSignedId: String

  sendConfirmationInstructions: Boolean
}

type ApiAccessTokenCreateUpdatePayload {
  "Autogenerated return type of ApiAccessTokenCreateUpdate."
  apiAccessToken: ApiAccessToken

  "A unique identifier for the client performing the mutation."
  clientMutationId: String

  errors: [String!]!

  user: User
}

type CommentCreateUpdatePayload {
  "Autogenerated return type of CommentCreateUpdate."
  clientMutationId: String

  comment: Comment

  errors: [String!]!

  user: User
}

type CreateDirectUploadPayload {
  "Autogenerated return type of CreateDirectUpload."
  clientMutationId: String

  directUpload: DirectUpload

  errors: [String!]!
}

type DestroyObjectPayload {
  "Autogenerated return type of DestroyObject."
  clientMutationId: String

  errors: [String!]!
}

type DiscardObjectPayload {
  "Autogenerated return type of DiscardObject."
  clientMutationId: String

  errors: [String!]!
}

type ModelAttachmentCreateUpdatePayload {
  "Autogenerated return type of ModelAttachmentCreateUpdate."
  clientMutationId: String

  errors: [String!]!

  modelAttachment: ModelAttachment

  user: User
}

type SuperUserUpdatePayload {
  "Autogenerated return type of SuperUserUpdate."
  clientMutationId: String

  errors: [String!]!

  user: User
}

type UserOtpUpdatePayload {
  "Autogenerated return type of UserOtpUpdate."
  clientMutationId: String

  errors: [String!]!

  user: User
}

type UserUpdatePayload {
  "Autogenerated return type of UserUpdate."
  clientMutationId: String

  errors: [String!]!

  user: User
}

type DirectUpload {
  directUploadHeaders: JSON!
  directUploadUrl: String!
  filename: String!
  id: String!
  publicUrl: String!
  signedId: String!
}

type ModelAttachment implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  attachment: Attachment
  name: String!
}

enum BlogPostsStatusEnum {
  all
  draft
  published
}

type ApiAccessToken implements Node & CommentInterface & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  active: Boolean!
  description: String
  expiresAt: ISO8601DateTime
  name: String!
  token: String!
  user: User!
  commentCount: Int!
  comments: [Comment!]!
}

type Attachment implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  contentType: String
  name: String!
  recordId: Int!
  recordType: String!
  url: String
}

type BlogPost implements Node & ModelAttachmentInterface & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  publishedAt: ISO8601DateTime
  richTextContent: RichTextJson!
  shortId: String!
  status: BlogPostStatusEnum!
  tags: [String!]!
  title: String!
  attachments: [ModelAttachment!]!
  comments: [Comment!]!
}

type Comment implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  discardedAt: ISO8601DateTime
  rating: Float
  richTextContent: RichTextJson!
  tags: [String!]!
  user: User!
}

type RichTextJson {
  content: String
  contentHtml: String
  contentMarkdown: String
  format: RichTextJsonFormatEnum!
}

enum RichTextJsonFormatEnum {
  plain
  markdown
  lexical
}

enum BlogPostStatusEnum {
  DRAFT
  PUBLISHED
}

type SuperUser implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  name: String
  users(term: String): [User!]
  jobRecords: [JobRecord!]
}

type JobRecord implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  activeJobId: String
  concurrencyKey: String
  cronAt: ISO8601DateTime
  cronKey: String
  error: String
  finishedAt: ISO8601DateTime
  performedAt: ISO8601DateTime
  priority: Int
  queueName: String
  retriedGoodJobId: String
  scheduledAt: ISO8601DateTime
  serializedParams: JSON
}

type Version implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  changes: [VersionChange!]
  event: String!
  itemId: Int!
  itemType: String!
  metadata: JSON
  user: User
  whodunnit: String
}

type VersionChange {
  label: String!
  newValue: String
  previousValue: String
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  nickname: String
}

input LoginInput {
  email: String!
  password: String!
}

type AuthPayload {
  user: User!
  token: String!
}

type User implements Node & ModelInterface {
  id: ID!
  modelId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  apiAccessTokens: [ApiAccessToken]
  avatar: Attachment
  cannyToken: String
  confirmedAt: ISO8601DateTime
  email: String!
  name: String
  nickname: String
  confirmed: Boolean!
  firstName: String!
  otpEnabled: Boolean!
  otpProvisioningUri: String!
  spoof: Boolean!
}

"An object with an ID."
interface CommentInterface {
  commentCount: Int!

  comments: [Comment!]!

  createdAt: ISO8601DateTime!

  "ID of the object."
  id: ID!

  modelId: Int!

  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface ModelAttachmentInterface implements Node & ModelInterface {
  attachments: [ModelAttachment!]!

  createdAt: ISO8601DateTime!

  "ID of the object."
  id: ID!

  modelId: Int!

  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface ModelInterface implements Node {
  "ID of the object."
  id: ID!

  modelId: Int!

  createdAt: ISO8601DateTime!

  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface Node {
  "ID of the object."
  id: ID!
}

"An ISO 8601-encoded datetime"
scalar ISO8601DateTime

"Represents untyped JSON"
scalar JSON

"Untyped JSON Input used for Store Model"
scalar StoreJsonInput
